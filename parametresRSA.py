# generate random integer values
from random import seed
from random import randint

#p = 9230674085814934751107402307045227470354027117063142732318790172446966357515515421947785380455793822284099022569246906027295607848040292901094567664230197
#q = 11629004838073748156647564488681050840370021607699951657371680300260223119319218030318292642364868044043065118640339011082831826711696088399013225837436991
e = 91271981396293721816284051075950197960572157851148300684300308702564059302132740702344608165968565759415739329105642091505483167616017628766568477896999098903463007958209579909332057913619466570559779924680974106397215944447195079650763284528642426285528637591995708954175893628937019413161031783989286930607
p = 32219906772714416866643912866710021116381418394442883817140318333012160784511807280979808521271738286434244559391047187447211536416938872403288519745096647518363829727783638014519944120778140629268010939374829729147389802359678459349561771478019959834308231312072161696434507773354139846425767705906193872329
q = 118514897135112702832131584298191703869303122337588769666013383278029821053629225225628019665965684275733110409691382238312506707030292346324557723179621061903788794840097883236205413339380810367504452908890550320395338754910941038316882266040172628460109540918825477843915461268428218453255724540136628387757
def gcd(a, b):
# Create the gcd of two positive integers.
    while b != 0:
        a, b = b, a % b
    return a


def is_coprime(x, y):
    return gcd(x, y) == 1


def generate_e():
    seed(1)
    # generate some integers
    e_g = randint(1, phi)
    while not is_coprime(e_g, phi) and e_g < phi:
        e_g = e_g+1
        return e_g


# Extended Euclidean Algorithm
def egcd(a, b):
    if a == 0:
        return b, 0, 1
    g, y, x = egcd(b % a, a)
    return g, x - (b // a) * y, y


# application of Extended Euclidean Algorithm to find a modular inverse
def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    return x % m


n = (p - q)%e;
phi = (p-1)*(q-1)
d = modinv(e, phi)
m_0 = 79983646605250279949555768043553655643744911785555079806869396400091538555582808271577481092510602385442284410977700327099878903030569524975677235549031062148418131824370449146416577144925194235180527090368771848336913063513774074791534381687798431439900263831030384270497916830158522807653726631253998938559
m_1 = 105084049529469578279294188172110157321171062099350825094829989158453015530618444017159277274669055711081456120617913258790685455066442455443047709735693994075319260539203443031316398074129822059032511932366777074164036023586711318642470961647590256026252201585217863728944763483283850605674841180214829178309
c_0 = pow(m_0, e, n)
c_1 = pow(m_1, e, n)
#d_0 = pow(c_0, d, n)

#if d_0 == m_0:
    #print(d_0)

print(n)
